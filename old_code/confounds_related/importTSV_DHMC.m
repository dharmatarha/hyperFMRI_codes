function importTSV_DHMC(pair)

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/adamb/Documents/hyperscanning_DBIC/sub-sid000522_task-storytelling1_run-01_bold_confounds.tsv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/12/14 07:25:19

%% Start the for loop through the four tsv files per subject

for file = 1:4
    
    % file path
    if file == 1
        filename = ['/home/adamb/Documents/hyperscanning_DBIC/sub-pair',num2str(pair),'DHMC_task-storytelling_acq-3mm_run-1_bold_confounds.tsv'];
    elseif file==2
        filename = ['/home/adamb/Documents/hyperscanning_DBIC/sub-pair',num2str(pair),'DHMC_task-storytelling_acq-3mm_run-2_bold_confounds.tsv'];
    elseif file==3
        filename = ['/home/adamb/Documents/hyperscanning_DBIC/sub-pair',num2str(pair),'DHMC_task-listening_acq-3mm_run-3_bold_confounds.tsv'];
    elseif file==4
        filename = ['/home/adamb/Documents/hyperscanning_DBIC/sub-pair',num2str(pair),'DHMC_task-reading_acq-3mm_run-4_bold_confounds.tsv'];
    end
        
        
    %% Initialize variables.
    delimiter = '\t';

    %% Read columns of data as strings:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%*s%*s%s%s%*s%s%*s%*s%*s%*s%*s%*s%s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%s%s%s%s%s%[^\n\r]';

    
    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Convert the contents of columns containing numeric strings to numbers.
    % Replace non-numeric strings with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = dataArray{col};
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));

    for col=[1,2,3,4,5,6,7,8,9,10,11]
        % Converts strings in the input cell array to numbers. Replaced non-numeric
        % strings with NaN.
        rawData = dataArray{col};
        for row=1:size(rawData, 1);
            % Create a regular expression to detect and remove non-numeric prefixes and
            % suffixes.
            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
            try
                result = regexp(rawData{row}, regexstr, 'names');
                numbers = result.numbers;

                % Detected commas in non-thousand locations.
                invalidThousandsSeparator = false;
                if any(numbers==',');
                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                    if isempty(regexp(thousandsRegExp, ',', 'once'));
                        numbers = NaN;
                        invalidThousandsSeparator = true;
                    end
                end
                % Convert numeric strings to numbers.
                if ~invalidThousandsSeparator;
                    numbers = textscan(strrep(numbers, ',', ''), '%f');
                    numericData(row, col) = numbers{1};
                    raw{row, col} = numbers{1};
                end
            catch me
            end
        end
    end


    %% Replace non-numeric cells with NaN
    R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
    raw(R) = {NaN}; % Replace non-numeric cells

    %% Allocate imported array to column variable names
    stdDVARS = cell2mat(raw(:, 1));
    nonstdDVARS = cell2mat(raw(:, 2));
    FramewiseDisplacement = cell2mat(raw(:, 3));
    aCompCor00 = cell2mat(raw(:, 4));
    aCompCor01 = cell2mat(raw(:, 5));
    X = cell2mat(raw(:, 6));
    Y = cell2mat(raw(:, 7));
    Z = cell2mat(raw(:, 8));
    RotX = cell2mat(raw(:, 9));
    RotY = cell2mat(raw(:, 10));
    RotZ = cell2mat(raw(:, 11));


    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;
    
    %% Save results
    save(['subject',num2str(pair),'DHMC_',num2str(file),'.mat']);
    
end